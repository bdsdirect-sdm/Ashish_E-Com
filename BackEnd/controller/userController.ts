import User from "../models/User";
import { Request, Response } from "express";
import { sendWelcomeEmail } from "../mail/nodemailerConfig";
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

export const addUser = async (req: Request, res: Response): Promise<void> => {
    try {
        let { FirstName, LastName, CompanyName, Email, PhoneNumber, Address } = req.body;
        if (!FirstName || !LastName || !CompanyName || !Email || !PhoneNumber || !Address) {
            res.status(400).json({ message: 'Please fill all fields' });
            return;
        }
        const existingUser = await User.findOne({ where: { Email } });
        if (existingUser) {
            res.status(409).json({ message: 'Email already exists' });
            return;
        }
        const files: any = req.files;
        const CompanyLogoPath = files['CompanyLogoPath'] ? files['CompanyLogoPath'][0].path : null;
        const ProfilePicturePath = files['ProfilePicturePath'] ? files['ProfilePicturePath'][0].path : null;

        const autogeneratedPassword = '1234567890';
        const hashedPassword = await bcrypt.hash(autogeneratedPassword, 10);

        const user = await User.create({
            FirstName,
            LastName,
            CompanyName,
            Email,
            Password: hashedPassword,
            PhoneNumber,
            Address,
            CompanyLogoPath,
            ProfilePicturePath,
        });
        await sendWelcomeEmail(user.Email, user.FirstName, autogeneratedPassword);
        res.status(201).json({ message: 'User added successfully' });
    } catch (error: any) {
        console.error(error);
        res.status(500).json({ message: 'Internal Server Error' });
    }
};

export const loginUser = async (req: Request, res: Response): Promise<void> => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ where: { Email: email } });
        if (!user) {
            res.status(404).json({ message: 'User not found' });
            return;
        }
        const isPasswordValid = await bcrypt.compare(password, user.Password);
        if (!isPasswordValid) {
            res.status(401).json({ message: 'Invalid credentials' });
            return;
        }
        const token = jwt.sign({ id: user.UserID }, "secret_key", { expiresIn: '1h' });
        res.status(200).json({ message: 'Login successful', token, userId: user.UserID });
    } catch (err: any) {
        res.status(500).json({ message: err.message });
    }
};

export const userDetails = async (req: Request, res: Response): Promise<void> => {
    const token = req.headers.authorization?.split(' ')[1]; // Assumes Bearer token format
    if (!token) {
        res.status(401).json({ message: 'No token provided' });
        return;
    }

    try {
        const decoded: any = jwt.verify(token, "secret_key");
        const userId = decoded.id;

        const user = await User.findOne({
            where: { UserID: userId },
            attributes: { exclude: ['Password'] } // Exclude password from the response
        });

        if (!user) {
            res.status(404).json({ message: 'User not found' });
            return;
        }

        res.status(200).json(user);
    } catch (error: any) {
        console.error('Error fetching user details:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
};
